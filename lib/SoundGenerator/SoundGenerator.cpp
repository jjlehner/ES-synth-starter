#include "SoundGenerator.hpp"

int32_t raw_sinewave[1024] = {
        0,0,1,2,3,3,4,5,6,7,7,8,9,10,10,11,12,13,14,14,15,16,17,18,18,
        19,20,21,21,22,23,24,24,25,26,27,28,28,29,30,31,31,32,33,34,34,
        35,36,37,37,38,39,40,40,41,42,43,43,44,45,46,46,47,48,48,49,50,
        51,51,52,53,54,54,55,56,56,57,58,58,59,60,61,61,62,63,63,64,65,
        65,66,67,67,68,69,69,70,71,71,72,73,73,74,74,75,76,76,77,78,78,
        79,79,80,81,81,82,83,83,84,84,85,85,86,87,87,88,88,89,89,90,91,
        91,92,92,93,93,94,94,95,95,96,96,97,97,98,98,99,99,100,100,101,
        101,102,102,103,103,104,104,105,105,105,106,106,107,107,108,108,
        108,109,109,110,110,110,111,111,112,112,112,113,113,113,114,114,
        115,115,115,116,116,116,117,117,117,117,118,118,118,119,119,119,
        119,120,120,120,121,121,121,121,122,122,122,122,122,123,123,123,
        123,123,124,124,124,124,124,125,125,125,125,125,125,125,126,126,
        126,126,126,126,126,126,127,127,127,127,127,127,127,127,127,127,
        127,127,127,127,127,127,127,127,127,127,128,127,127,127,127,127,
        127,127,127,127,127,127,127,127,127,127,127,127,127,127,127,126,
        126,126,126,126,126,126,126,125,125,125,125,125,125,125,124,124,
        124,124,124,123,123,123,123,123,122,122,122,122,122,121,121,121,
        121,120,120,120,119,119,119,119,118,118,118,117,117,117,117,116,
        116,116,115,115,115,114,114,113,113,113,112,112,112,111,111,110,
        110,110,109,109,108,108,108,107,107,106,106,105,105,105,104,104,
        103,103,102,102,101,101,100,100,99,99,98,98,97,97,96,96,95,95,94,
        94,93,93,92,92,91,91,90,89,89,88,88,87,87,86,85,85,84,84,83,83,
        82,81,81,80,79,79,78,78,77,76,76,75,74,74,73,73,72,71,71,70,69,
        69,68,67,67,66,65,65,64,63,63,62,61,61,60,59,58,58,57,56,56,55,
        54,54,53,52,51,51,50,49,48,48,47,46,46,45,44,43,43,42,41,40,40,
        39,38,37,37,36,35,34,34,33,32,31,31,30,29,28,28,27,26,25,24,24,
        3,22,21,21,20,19,18,18,17,16,15,14,14,13,12,11,10,10,9,8,7,7,6,
        5,4,3,3,2,1,0,0,0,-1,-2,-3,-3,-4,-5,-6,-7,-7,-8,-9,-10,-10,-11,
        -12,-13,-14,-14,-15,-16,-17,-18,-18,-19,-20,-21,-21,-22,-23,-24,
        -24,-25,-26,-27,-28,-28,-29,-30,-31,-31,-32,-33,-34,-34,-35,-36,
        -37,-37,-38,-39,-40,-40,-41,-42,-43,-43,-44,-45,-46,-46,-47,-48,
        -48,-49,-50,-51,-51,-52,-53,-54,-54,-55,-56,-56,-57,-58,-58,-59,
        -60,-61,-61,-62,-63,-63,-64,-65,-65,-66,-67,-67,-68,-69,-69,-70,
        -71,-71,-72,-73,-73,-74,-74,-75,-76,-76,-77,-78,-78,-79,-79,-80,
        -81,-81,-82,-83,-83,-84,-84,-85,-85,-86,-87,-87,-88,-88,-89,-89,
        -90,-91,-91,-92,-92,-93,-93,-94,-94,-95,-95,-96,-96,-97,-97,-98,
        -98,-99,-99,-100,-100,-101,-101,-102,-102,-103,-103,-104,-104,
        -105,-105,-105,-106,-106,-107,-107,-108,-108,-108,-109,-109,
        -110,-110,-110,-111,-111,-112,-112,-112,-113,-113,-113,-114,
        -114,-115,-115,-115,-116,-116,-116,-117,-117,-117,-117,-118,
        -118,-118,-119,-119,-119,-119,-120,-120,-120,-121,-121,-121,
        -121,-122,-122,-122,-122,-122,-123,-123,-123,-123,-123,-124,
        -124,-124,-124,-124,-125,-125,-125,-125,-125,-125,-125,-126,
        -126,-126,-126,-126,-126,-126,-126,-127,-127,-127,-127,-127,
        -127,-127,-127,-127,-127,-127,-127,-127,-127,-127,-127,-127,
        -127,-127,-127,-128,-127,-127,-127,-127,-127,-127,-127,-127,
        -127,-127,-127,-127,-127,-127,-127,-127,-127,-127,-127,-127,
        -126,-126,-126,-126,-126,-126,-126,-126,-125,-125,-125,-125,
        -125,-125,-125,-124,-124,-124,-124,-124,-123,-123,-123,-123,
        -123,-122,-122,-122,-122,-122,-121,-121,-121,-121,-120,-120,
        -120,-119,-119,-119,-119,-118,-118,-118,-117,-117,-117,-117,
        -116,-116,-116,-115,-115,-115,-114,-114,-113,-113,-113,-112,
        -112,-112,-111,-111,-110,-110,-110,-109,-109,-108,-108,-108,
        -107,-107,-106,-106,-105,-105,-105,-104,-104,-103,-103,-102,
        -102,-101,-101,-100,-100,-99,-99,-98,-98,-97,-97,-96,-96,-95,
        -95,-94,-94,-93,-93,-92,-92,-91,-91,-90,-89,-89,-88,-88,-87,
        -87,-86,-85,-85,-84,-84,-83,-83,-82,-81,-81,-80,-79,-79,-78,
        -78,-77,-76,-76,-75,-74,-74,-73,-73,-72,-71,-71,-70,-69,-69,
        -68,-67,-67,-66,-65,-65,-64,-63,-63,-62,-61,-61,-60,-59,-58,
        -58,-57,-56,-56,-55,-54,-54,-53,-52,-51,-51,-50,-49,-48,-48,
        -47,-46,-46,-45,-44,-43,-43,-42,-41,-40,-40,-39,-38,-37,-37,
        -36,-35,-34,-34,-33,-32,-31,-31,-30,-29,-28,-28,-27,-26,-25,
        -24,-24,-23,-22,-21,-21,-20,-19,-18,-18,-17,-16,-15,-14,-14,
        -13,-12,-11,-10,-10,-9,-8,-7,-7,-6,-5,-4,-3,-3,-2,-1,0
    };

int32_t SoundGenerator::volumeDecay(const int32_t Vin, const int32_t time){
    return (int32_t) Vin*exp(- time/1.0e6);
}

int32_t SoundGenerator::clip(const int32_t inputVolume){
    return inputVolume > 255 ? 255 : inputVolume;
}

int32_t SoundGenerator::shiftOctave(const int32_t stepSize, const int32_t octave){
    return octave - 4 > 0 ? stepSize << (octave -4) : stepSize >> (4 - octave);
}

SoundGenerator::SoundGenerator() = default;

int32_t SoundGenerator::sawtooth(Note note){
    uint32_t time = micros() - note.timePressed;
    int32_t stepSize = note.getStepSize();
    int32_t octave = (int32_t) k2.getRotation();
    stepSize = this->shiftOctave(stepSize, octave);
    int32_t deltaPhaseAcc = stepSize;
    return deltaPhaseAcc;
}

int32_t SoundGenerator::sine(Note note){
    uint32_t time = micros() - note.timePressed;
    int32_t frequency = note.getFrequency();
    int32_t octave = (int32_t) k2.getRotation();
    frequency = octave - 4 > 0 ? frequency << (octave -4) : frequency >> (4 - octave);
    size_t idx = (static_cast<size_t> (1024*frequency* time/1e6)) % 1024;
    return raw_sinewave[idx];
}

int32_t SoundGenerator::getSound(){
    auto notes = notesPressed.read();
    int16_t waveform = k1.getRotation();
    int32_t Vout = 0;
    if (waveform < 8){ // Sawtooth
        for(size_t i = 0; i < notes.second ; i++){
            PhaseAccPool::setPhaseAcc(notes.first[i].indexPhaseAcc, PhaseAccPool::phaseAcc(notes.first[i].indexPhaseAcc) + this -> sawtooth(notes.first[i]));
            Vout += PhaseAccPool::phaseAcc(notes.first[i].indexPhaseAcc) >> 24;
        }
    } else { // Sine
        size_t upperLim = notes.second > 1 ? 1 : notes.second;
        for(size_t i = 0; i < upperLim ; i++){
            // PhaseAccPool::setPhaseAcc(notes.first[i].indexPhaseAcc, this -> sine(notes.first[i]));
            Vout = this -> sine(notes.first[i]);
        }
    }
    Vout = Vout >> (8-k3.getRotation()/2);
    return Vout;
}